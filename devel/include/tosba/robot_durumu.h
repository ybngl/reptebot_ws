// Generated by gencpp from file tosba/robot_durumu.msg
// DO NOT EDIT!


#ifndef TOSBA_MESSAGE_ROBOT_DURUMU_H
#define TOSBA_MESSAGE_ROBOT_DURUMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tosba
{
template <class ContainerAllocator>
struct robot_durumu_
{
  typedef robot_durumu_<ContainerAllocator> Type;

  robot_durumu_()
    : Header()
    , robot_id(0)
    , is_ready(false)  {
    }
  robot_durumu_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , robot_id(0)
    , is_ready(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef uint8_t _is_ready_type;
  _is_ready_type is_ready;





  typedef boost::shared_ptr< ::tosba::robot_durumu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tosba::robot_durumu_<ContainerAllocator> const> ConstPtr;

}; // struct robot_durumu_

typedef ::tosba::robot_durumu_<std::allocator<void> > robot_durumu;

typedef boost::shared_ptr< ::tosba::robot_durumu > robot_durumuPtr;
typedef boost::shared_ptr< ::tosba::robot_durumu const> robot_durumuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tosba::robot_durumu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tosba::robot_durumu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tosba::robot_durumu_<ContainerAllocator1> & lhs, const ::tosba::robot_durumu_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.robot_id == rhs.robot_id &&
    lhs.is_ready == rhs.is_ready;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tosba::robot_durumu_<ContainerAllocator1> & lhs, const ::tosba::robot_durumu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tosba

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tosba::robot_durumu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tosba::robot_durumu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tosba::robot_durumu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tosba::robot_durumu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tosba::robot_durumu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tosba::robot_durumu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tosba::robot_durumu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8617436c5c51524b82803c8a17f9596d";
  }

  static const char* value(const ::tosba::robot_durumu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8617436c5c51524bULL;
  static const uint64_t static_value2 = 0x82803c8a17f9596dULL;
};

template<class ContainerAllocator>
struct DataType< ::tosba::robot_durumu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tosba/robot_durumu";
  }

  static const char* value(const ::tosba::robot_durumu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tosba::robot_durumu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n"
"int32 robot_id\n"
"bool is_ready \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tosba::robot_durumu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tosba::robot_durumu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.robot_id);
      stream.next(m.is_ready);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_durumu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tosba::robot_durumu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tosba::robot_durumu_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "is_ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_ready);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOSBA_MESSAGE_ROBOT_DURUMU_H
